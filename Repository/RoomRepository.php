<?php

namespace Esolving\Eschool\RoomBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RoomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoomRepository extends EntityRepository {

    public function findOneByRoomIdByLanguage($roomId, $language) {
        $qb = $this->createQueryBuilder('room');
        $qb->addSelect('roomType', 'sectionType', 'roomType_languages', 'sectionType_languages', 'headquarterType', 'headquarterType_languages')
                ->join('room.roomType', 'roomType')
                ->join('roomType.languages', 'roomType_languages')
                ->join('room.sectionType', 'sectionType')
                ->join('sectionType.languages', 'sectionType_languages')
                ->join('room.headquarterType', 'headquarterType')
                ->join('headquarterType.languages', 'headquarterType_languages')
                ->where($qb->expr()->eq('roomType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('sectionType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('headquarterType_languages.language', $qb->expr()->literal($language)))
                ->andWhere('room.id = :roomId')
                ->setParameter('roomId', $roomId)
        ;
        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    public function findAllBySectionIdByHeadquarterIdByLanguage($sectionId, $headquarterId, $language) {
        $qb = $this->createQueryBuilder('room');

        $qb->addSelect('roomType','roomType_languages','sectionType', 'sectionType_languages', 'headquarterType', 'headquarterType_languages')
                ->join('room.roomType','roomType')
                ->join('roomType.languages','roomType_languages')
                ->join('room.sectionType', 'sectionType')
                ->join('sectionType.languages', 'sectionType_languages')
                ->join('room.headquarterType', 'headquarterType')
                ->join('headquarterType.languages', 'headquarterType_languages')
                ->where($qb->expr()->eq('sectionType.id', ':sectionId'))
                ->andWhere($qb->expr()->eq('headquarterType.id', ':headquarterId'))
                ->andWhere('roomType_languages.language = :language')
                ->andWhere('sectionType_languages.language = :language')
                ->andWhere('headquarterType_languages.language = :language')
                ->setParameters(array(
                    'sectionId' => $sectionId,
                    'headquarterId' => $headquarterId,
                    'language' => $language
                ))
        ;
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findAllByLanguage($language) {
        $qb = $this->createQueryBuilder('room');
        $qb->addSelect('roomType', 'sectionType', 'headquarterType', 'roomType_languages', 'sectionType_languages', 'headquarterType_languages')
                ->join('room.roomType', 'roomType')
                ->join('room.sectionType', 'sectionType')
                ->join('room.headquarterType', 'headquarterType')
                ->join('roomType.languages', 'roomType_languages')
                ->join('sectionType.languages', 'sectionType_languages')
                ->join('headquarterType.languages', 'headquarterType_languages')
                ->where($qb->expr()->eq('roomType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('sectionType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('headquarterType_languages.language', $qb->expr()->literal($language)))
        ;
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findAllByLanguageToSonataAdmin($xlanguage, $query) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query->addSelect('room_roomType', 'room_sectionType', 'room_roomType_languages', 'room_sectionType_languages', 'room_headquarterType', 'room_headquarterType_languages')
                ->join('o.roomType', 'room_roomType')
                ->join('o.sectionType', 'room_sectionType')
                ->join('o.headquarterType', 'room_headquarterType')
                ->join('room_roomType.languages', 'room_roomType_languages')
                ->join('room_sectionType.languages', 'room_sectionType_languages')
                ->join('room_headquarterType.languages', 'room_headquarterType_languages')
                ->where($qb->expr()->eq('room_roomType_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('room_sectionType_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('room_headquarterType_languages.language', $qb->expr()->literal($xlanguage)))
        ;
        return $query;
    }

}
